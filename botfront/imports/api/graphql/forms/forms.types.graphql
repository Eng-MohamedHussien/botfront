type Mutation {
    submitForm(
        projectId: String!
        environment: String
        tracker: Any!
    ): updateResponse!
    createForm(form: FormInput): Any
    updateForm(form: FormInput): Any
}

type Query {
    getForms(projectId: String!, names: String): Any
}

type Form {
    name: FormName!
    slots: [SlotToFill]
    collect_in_botfront: Boolean
    utter_on_submit: Boolean # utter_submit_{slot_name}
    description: String
    projectId: String!
}

input FormInput {
    name: FormName!
    slots: [SlotToFillInput]
    description: String
    projectId: String!
}

type SlotToFill {
    name: String!
    filling: [SlotFilling]
    validation: SlotValidation
    utter_on_new_valid_slot: Boolean
    # utter_valid_{slot_name}
    # utter_invalid{slot_name}
    # utter_ask_{slot_name}
}

type SlotValidation {
    operator: ValidationOperator!
    comparatum: Any
}

input SlotToFillInput {
    name: String!
    filling: [SlotFillingInput]
}

interface SlotFilling {
    type: FillingSource!
}

input SlotFillingInput {
    type: Any
}

type SlotFillingFromEntity implements SlotFilling {
    type: FillingSource!
    entity: [String]
    intent: [String]
    not_intent: [String]
}

type SlotFillingFromIntent implements SlotFilling {
    type: FillingSource!
    intent: [String]
    not_intent: [String]
    value: Any
}

type SlotFillingFromText implements SlotFilling {
    type: FillingSource!
    intent: [String]
    not_intent: [String]
}

scalar FormName # (/.*_form$/)

scalar ResponseName # (/^utter_.*/)

enum FillingSource {
    from_entity
    from_intent
    from_trigger_intent
    from_text
}

enum ValidationOperator {
    is_in
    is_exactly
    contains
    starts_with
    ends_with
    matches
    eq
    gt
    gte
    lt
    lte
}